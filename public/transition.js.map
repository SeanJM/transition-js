{"version":3,"sources":["init.js","Animate.js","delta.js","ease.js","enqueue.js","exports.js","method.js","transition.js","tools/forEach.js","tools/round.js","tools/then.js","tools/whileType.js"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"transition.js","sourcesContent":["var FILTER_DELTA = {\n  back : deltaBack,\n  bounce : deltaBounce,\n  linear : deltaLinear,\n  quadratic : deltaQuadratic,\n};\n\nvar FILTER_EASE = {\n  'in' : easeIn,\n  'in-out' : easeInOut,\n  'out' : easeOut,\n};","function Animate(self, callback) {\n  this.method = {\n    then : [],\n    catch : []\n  };\n  this.options = self.options;\n  this.callback = callback;\n  this.iterations = 0;\n}\n\nAnimate.prototype.then = function (callback) {\n  this.method.then.push(callback);\n};\n\nAnimate.prototype.elastify = function (p) {\n  var a = this.options.elastic * 5;\n  return this.options.elastic !== 0\n    ? Math.pow(2, 15 * --p) * Math.cos(a * p * Math.PI * 1 / 3)\n    : p;\n};\n\nAnimate.prototype.start = function () {\n  var self = this;\n  var start = this.options.start;\n  var end = this.options.end;\n  var duration = this.options.duration;\n  var delay = this.options.delay;\n  var result = {};\n  var progress;\n  var time;\n\n  setTimeout(function () {\n    self.options.timer = setInterval(function () {\n      time = time || new Date();\n      progress = Math.min((new Date() - time) / duration, 1);\n\n      // Set the frame\n      forEach(start, function (value, key) {\n        var delta = self.elastify(self.options.ease(self.options.delta, progress));\n        var step = round(delta, 2);\n        result[key] = start[key] + step * (end[key] - start[key]);\n      });\n\n      self.callback(result, progress);\n\n      if (progress === 1) {\n        self.iterations++;\n\n        clearInterval(self.options.timer);\n\n        if (self.options.iterations === self.iterations) {\n          then(self);\n        } else {\n          self.start();\n        }\n      }\n    }, self.options.fps);\n  }, delay);\n\n  return this;\n};\n","function deltaBack(p) {\n  // This code was adapted from MooTools.FX.Transitions.\n  var x = 6;\n  return Math.pow(p, 2) * ((x + 1) * p - x);\n}\n\nfunction deltaBounce(p) {\n  // The code is taken from MooTools.FX.Transitions.\n  for (var a = 0, b = 1; 1; a += b, b /= 2) {\n    if (p >= (7 - 4 * a) / 11) {\n      return -Math.pow((11 - 6 * a - 11 * p) / 4, 2) + Math.pow(b, 2);\n    }\n  }\n}\n\nfunction deltaLinear(p) {\n  return p;\n}\n\nfunction deltaQuadratic(p) {\n  return Math.pow(p, 5);\n}\n","function easeInOut(transition, pos) {\n  return (pos <= 0.5) ? transition(2 * pos) / 2 : (2 - transition(2 * (1 - pos))) / 2;\n}\n\nfunction easeIn(transition, pos) {\n  return transition(pos);\n}\n\nfunction easeOut(transition, pos) {\n  return 1 - transition(1 - pos);\n}\n","(function () {\n  /*\n    A function to ensure that the user has not chained two of the same method\n    this is done because the last method call will overwrite every preceeding\n    method with the same name with the exception of 'then'\n    This error ensures the user is aware of the behavior.\n  */\n\n  function checkHistory(history) {\n    var last = history.slice(-1)[0];\n    var second = history.length > 1\n      ? history.slice(-2)[0]\n      : false;\n\n    var boolean = ((\n      // Ensure both values exist for the comparison\n      last && second\n    ) && (\n      // Is not then\n      last.method !== method_then\n    ) && (\n      // Check to see if the methods are identical\n      last.method === second.method\n    ));\n\n    if (boolean) {\n      throw 'Cannot chain two of the same method, unless that method is \\'then\\'';\n    }\n  }\n\n  function next(self) {\n    var queue = self.queue;\n    var result;\n\n    if (!self.waiting && queue[0]) {\n      result = queue[0].method.apply(self, queue[0].arguments);\n      if (result && typeof result.then === 'function') {\n        self.waiting = true;\n        result.then(function () {\n          self.waiting = false;\n          queue.shift();\n          next(self);\n        });\n      } else {\n        queue.shift();\n        next(self);\n      }\n    }\n\n  }\n\n  function enqueue(self, opt) {\n    self.queue.push(opt);\n    self.history.push(opt);\n    checkHistory(self.history);\n    next(self);\n  }\n\n  window.enqueue = enqueue;\n}());\n","window.transition = function transition(opt) {\n  return new Transition(opt);\n};\n","function method_start(callback) {\n  return new Animate(this, callback).start();\n}\n\nfunction method_transition(options) {\n  this.options = {\n    start : options.start,\n    end : options.end,\n\n    delta : FILTER_DELTA[options.delta]\n      || FILTER_DELTA.quadratic,\n\n    ease : FILTER_EASE[options.ease]\n      || FILTER_EASE['in-out'],\n\n    elastic : options.elastic\n      || 0,\n\n    iterations : options.iterations\n      || 1,\n\n    duration : options.duration\n      || 300,\n\n    delay : options.delay\n      || 0,\n\n    fps : options.fps\n      ? 1000 / options.fps\n      : 10,\n  };\n}\n\nfunction method_then(callback) {\n  if (typeof callback === 'function') {\n    callback();\n  }\n}\n","function Transition(opt) {\n  this.queue = [];\n  this.history = [];\n\n  enqueue(this, {\n    name : 'transition',\n    method : method_transition,\n    arguments : [ opt ]\n  });\n}\n\nTransition.prototype.start = function (callback) {\n  enqueue(this, {\n    name : 'start',\n    method : method_start,\n    arguments : [ callback ]\n  });\n  return this;\n};\n\nTransition.prototype.transition = function (opt) {\n  enqueue(this, {\n    name : 'transition',\n    method : method_transition,\n    arguments : [ opt ]\n  });\n  return this;\n};\n\nTransition.prototype.then = function (callback) {\n  enqueue(this, {\n    name : 'then',\n    method : method_then,\n    arguments : [ callback ]\n  });\n  return this;\n};\n\nTransition.prototype.stop = function (callback) {\n  this.queue = [];\n  clearInterval(this.options.timer);\n  return this;\n};\n\nTransition.ease = {\n  in : easeIn,\n  out : easeOut,\n  inOut : easeInOut\n};\n\nTransition.delta = {\n  linear : deltaLinear,\n  quadratic : deltaQuadratic,\n  bounce : deltaBounce,\n  back : deltaBack\n};\n","function forEach(iterable, func_callback) {\n  for (var k in iterable) if (func_callback(iterable[k], k) === false) return false;\n}\n","function round(number, places) {\n  return Math.round(number * Math.pow(10, places)) / Math.pow(10, places);\n}\n","function then(self) {\n  self.method.catch = [];\n  whileType(self.method.then);\n}\n","// A function to loop through an array of functions, executing each function\n// then removing it from the array\n\nfunction whileType(method) {\n  var n = arguments.length;\n  var a = new Array(n);\n  var i = 1;\n\n  for (;i < n; i++) {\n    a.push(arguments[i]);\n  }\n\n  while (method && method.length) {\n    method[0].apply(a);\n    method.shift();\n  }\n}\n"],"sourceRoot":"/source/"}